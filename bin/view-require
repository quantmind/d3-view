#!/usr/bin/env node
var fs = require("fs"),
    commander = require("commander"),
    logger = require('console');

commander
    .version(require("../package.json").version)
    .usage("[options] [file]")
    .description("Create a d3-require.js file with dependencies and additional javascript prepended")
    .option("-o, --out <file>", "output file name; defaults to “d3-require.js”", "d3-require.js")
    .option("-m, --node_modules <dir>", "Node modules location", "node_modules")
    .option("-p, --prepend <files>", "Additional javascript files to prepend, comma separated", "")
    .parse(process.argv);

if (commander.args.length === 0) commander.args[0] = "d3-require.js";
else if (commander.args.length !== 1) handleError({message: "multiple input files"});

var node_modules = commander.node_modules || "node_modules",
    out = fs.createWriteStream(commander.out).on("error", handleEpipe),
    START = '(function (require) {\n',
    END = [
        "Object.keys(dependencies).forEach(function (name) {",
        "    require.libs.set(name, name + '@' + dependencies[name]);",
        "})",
        "}(this.d3.require));",
        ""].join('\n');


fs.readFile("package.json", "utf8", function(error, text) {
    if (error) throw error;
    var json = JSON.parse(text),
        d3deps = d3Dependencies(json.dependencies),
        d3dev = d3Dependencies(json.devDependencies),
        files = commander.prepend ? commander.prepend.split(",") : [];
    files.push('d3-view/build/d3-require.js');
    d3Dependencies2(Object.keys(d3deps), d3deps, [], function () {
        d3Dependencies2(Object.keys(d3dev), d3deps, [], function () {
            writeData(files, d3deps);
        });
    });
});


function writeData(files, d3deps) {
    if (files.length) {
        var file = files.splice(0, 1)[0].trim();
        if (file) writeFile(file, files, d3deps);
        else writeData(files, d3deps);
    } else {
        var clean = {};
        Object.keys(d3deps).forEach(function (key) {
            var value = d3deps[key],
                t = value.split('.').reduce(function (s, v) {return s + (+v);}, 0);
            if (t === t) clean[key] = value;
            else logger.error('Cannot set dependency ' + key + ' ' + value);
        });
        out.write(START);
        out.write("var dependencies = '" + JSON.stringify(clean) + "';\n");
        out.write(END);
        logger.info('Created “' + commander.out + '”');
    }
}


function writeFile(file, files, d3deps, prefix) {
    file = (prefix || '') + file;
    fs.readFile(file, "utf8", function(error, text) {
        if (error) {
            if (error.code === "ENOENT" && !prefix)
                writeFile(file, files, d3deps, node_modules + "/");
            else
                throw error;
        } else {
            logger.info('include “' + file + '”');
            out.write(text);
            writeData(files, d3deps);
        }
    });
}


function d3Dependencies (deps) {
    deps = deps || {};
    return Object.keys(deps).reduce(function (o, name) {
        if (name.substring(0, 3) === 'd3-') o[name] = deps[name];
        return o;
    }, {});
}

function d3Dependencies2(deps, all, added, callback) {
    if (deps.length) {
        var name = deps.splice(0, 1)[0];
        fs.readFile(node_modules + '/' + name + '/package.json', 'utf-8', function (error, text) {
            if (error) throw error;
            var json = JSON.parse(text),
                d2 = d3Dependencies(json.dependencies);
            Object.keys(d2).forEach(function (key) {
                if (name.substring(0, 3) === 'd3-' && all[key] === undefined) {
                    if (!added) added = {};
                    all[key] = d2[key];
                    added[key] = d2[key];
                }
            });
            d3Dependencies2(deps, all, added, callback);
        });
    } else if (added.length) d3Dependencies2(added, all, [], callback);
    else if (callback) callback();
}

function handleEpipe(error) {
    if (error.code === "EPIPE" || error.errno === "EPIPE") {
        process.exit(0);
    }
}


function handleError(error) {
  logger.error();
  logger.error("  error: " + error.message);
  logger.error();
  process.exit(1);
}
